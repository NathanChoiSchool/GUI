import javax.swing.*;
import java.awt.*;
import java.awt.*;
import java.awt.event.ActionEvent ;
import java.awt.event.* ;
import java.util.Random;

public class SignupForm {
    static JFrame frame = new JFrame("Signup");
    static JTextField firstNameField = new JTextField(20);
    static JTextField lastNameField = new JTextField(20);
    static JTextField emailField = new JTextField(20);
    static JPasswordField passwordField = new JPasswordField(20);
    static submitButtonListener =  new  SubmitButtonListener() ;

	class SubmitButtonListener implements  ActionListener {
		public void actionPerformed(ActionEvent e) {
	        String firstName = firstNameField.getText().trim();
            String lastName = lastNameField.getText().trim();
            String email = emailField.getText().trim();
            String password = new String(passwordField.getPassword()).trim();

            if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "All fields must be filled out.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    validatePassword(password);
                    String username = generateUsername(firstName, lastName);
                    User newUser = new User(firstName, lastName, email, password);
                    UserDatabase.addUser(username, newUser);
                    JOptionPane.showMessageDialog(frame, "Signup Successful! Your username is: " + username, "Success", JOptionPane.INFORMATION_MESSAGE);
                    frame.dispose();
                } catch (PasswordException ex) {
                    JOptionPane.showMessageDialog(frame, ex.getMessage(), "Signup Error", JOptionPane.ERROR_MESSAGE);
                }
            }
		}
    }

    public static void displaySignupForm() {
        frame.setSize(500, 400);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 30, 10, 30);

        JButton submitButton = new JButton("Submit");

        Font fieldFont = new Font("Arial", Font.PLAIN, 24);
        firstNameField.setFont(fieldFont);
        lastNameField.setFont(fieldFont);
        emailField.setFont(fieldFont);
        passwordField.setFont(fieldFont);
        submitButton.setFont(new Font("Arial", Font.BOLD, 14));

        submitButton.addActionListener( new SubmitButtonListener() );

        frame.add(new JLabel("First Name:"), gbc);
        frame.add(firstNameField, gbc);
        frame.add(new JLabel("Last Name:"), gbc);
        frame.add(lastNameField, gbc);
        frame.add(new JLabel("Email:"), gbc);
        frame.add(emailField, gbc);
        frame.add(new JLabel("Password:"), gbc);
        frame.add(passwordField, gbc);
        frame.add(submitButton, gbc);

        frame.setVisible(true);
    }

    private static String generateUsername(String firstName, String lastName) {
        Random random = new Random();
        int randomNumber = 1000 + random.nextInt(9000);  // Generates a number from 1000 to 9999
        return "" + firstName.charAt(0) + lastName.charAt(0) + "-" + randomNumber;
    }

    private static void validatePassword(String password) throws PasswordException {
        if (password.length() < 8) throw new Minimum8CharactersRequired();
        if (!password.matches(".*\\d.*")) throw new NumberCharacterMissing();
        if (!password.matches(".*[a-z].*")) throw new LowerCaseCharacterMissing();
        if (!password.matches(".*[A-Z].*")) throw new UpperCaseCharacterMissing();
        if (!password.matches(".*[!@#$%^&*()].*")) throw new SpecialCharacterMissing();
    }

    // Custom exception classes for password validation
    static class PasswordException extends Exception {
        public PasswordException(String message) { super(message); }
    }

    static class UpperCaseCharacterMissing extends PasswordException {
        public UpperCaseCharacterMissing() { super("Password must contain at least one uppercase letter."); }
    }

    static class LowerCaseCharacterMissing extends PasswordException {
        public LowerCaseCharacterMissing() { super("Password must contain at least one lowercase letter."); }
    }

    static class SpecialCharacterMissing extends PasswordException {
        public SpecialCharacterMissing() { super("Password must contain at least one special character."); }
    }

    static class NumberCharacterMissing extends PasswordException {
        public NumberCharacterMissing() { super("Password must contain at least one number."); }
    }

    static class Minimum8CharactersRequired extends PasswordException {
        public Minimum8CharactersRequired() { super("Password must be at least 8 characters long."); }
    }
}
